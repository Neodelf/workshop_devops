---
- hosts: all
  gather_facts: no
  vars_prompt:
    - name: "app_image_tag"
      prompt: "DevOps demo image tag"
      private: no

  tasks:
    - set_fact: app_image_tag={{ app_image_tag }}
      tags: always


- hosts: webservers
  gather_facts: no
  # become: yes
  # become_user: "{{ app_run_user }}"

  tasks:
    - template:
        src: environment.j2
        dest: "{{ env_file }}"
      tags: env

    - name: download image
      docker_image:
        name: "{{ app_image_name }}:{{ app_image_tag }}"
        force: yes

    - name: download nginx image
      docker_image:
        name: "{{ app_nginx_image_name }}:latest"
        force: yes

    - name: run migrations
      docker_container:
        recreate: yes
        name: app-migrations
        command: "bin/rails db:migrate"
        image: "{{ app_image_name }}:{{ app_image_tag }}"
        state: started
        env_file: "{{ env_file }}"
      run_once: yes
      tags: [webservers]


    - name: start application
      docker_container:
        recreate: yes
        name: app
        image: "{{ app_image_name }}:{{ app_image_tag }}"
        state: started
        # log_driver: awslogs
        # log_options:
        #   awslogs-group: "{{ app_aws_logs_group }}"
        #   awslogs-stream: "{{ app_aws_logs_stream_web }}"
        #   awslogs-region: '{{ app_aws_region }}'
        restart_policy: always
        env_file: "{{ env_file }}"
        env:
          RAILS_ENV: production
          NODE_ENV: production
        # networks:
        #   - main
        ports:
          - "80:{{ app_port }}"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/tmp:/tmp"
          - "/opt:/opt"
          - "/var/tmp:/var/tmp"
      tags: [webservers]

    - name: nginx container
      docker_container:
        recreate: yes
        name: nginx
        image: "{{ app_nginx_image_name }}:latest"
        state: started
        # log_driver: awslogs
        #log_options:
        #  awslogs-group: "{{ app_aws_logs_group }}"
        #  awslogs-stream: "{{ app_aws_logs_stream_web }}"
        #  awslogs-region: '{{ app_aws_region }}'
        restart_policy: always
        env_file: "{{ env_file }}"
        # networks:
        #   - main
        # ports:
        #   - "80:{{ app_port }}"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/tmp:/tmp"
          - "/opt:/opt"
          - "/var/tmp:/var/tmp"
      tags: [webservers]

    - name: create network
      docker_network:
        name: '{{ docker_network_name }}'
        connected:
          - app
          - nginx

